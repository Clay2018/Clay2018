<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in golang on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 May 2022 00:05:24 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go mod</title>
      <link>http://localhost:1313/post/go_mod/</link>
      <pubDate>Mon, 02 May 2022 00:05:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go_mod/</guid>
      <description>Resource go mod使用: https://www.jianshu.com/p/760c97ff644c 发展历史 GOPATH 1 2 3 4 5 6 7 8 go env -w GO111MODULE=&amp;#34;off&amp;#34; GOROOT=/usr/local/go GOPATH=/home/dev/project/go /* 按如下路径+导包路径寻找所需要的包 /usr/local/go/src/ */ go build main.go go编译项目时，只会在GOROOT和G</description>
    </item>
    
    <item>
      <title>GC in golang</title>
      <link>http://localhost:1313/post/gc_in_golang/</link>
      <pubDate>Wed, 06 Apr 2022 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/gc_in_golang/</guid>
      <description>Resource Golang什么时候会触发GC: https://www.jianshu.com/p/96a52a8127d9</description>
    </item>
    
    <item>
      <title>runtime in golang</title>
      <link>http://localhost:1313/post/runtime_in_golang/</link>
      <pubDate>Sat, 26 Feb 2022 00:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/runtime_in_golang/</guid>
      <description>Resource 聊聊什么是Go runtime.KeepAlive: https://developer.51cto.com/article/692468.html runtime.SetFinalizer https://zhuanlan.zhihu.com/p/76504936 https://www.cnblogs.com/binHome/p/12901392.html</description>
    </item>
    
    <item>
      <title>version change in golang</title>
      <link>http://localhost:1313/post/version_change_in_golang/</link>
      <pubDate>Tue, 15 Feb 2022 00:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/version_change_in_golang/</guid>
      <description>Go1.14 本次更新大多数变化在于工具链的实现，runtime和libraries defer性能提升 在Go1.14之前，Go中的每一个defer函数，</description>
    </item>
    
    <item>
      <title>io.WriteString()分析</title>
      <link>http://localhost:1313/post/io_write_string_analysis/</link>
      <pubDate>Sun, 09 Jan 2022 00:45:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/io_write_string_analysis/</guid>
      <description>问题 内存管理在Golang中是棘手的，我们可能相信golang本身已具备内存自动管理功能，可以从此解放出来。但上周的某个功能测试结果让我改变</description>
    </item>
    
    <item>
      <title>pprof in golang</title>
      <link>http://localhost:1313/post/pprof_in_golang/</link>
      <pubDate>Sun, 09 Jan 2022 00:45:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/pprof_in_golang/</guid>
      <description>CPU pprof 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; _ &amp;#34;net/http/pprof&amp;#34; &amp;#34;time&amp;#34; ) func main() { go func() { ticker := time.NewTicker(time.Second) for { select { case t := &amp;lt;- ticker.C: fmt.Println(&amp;#34;Current time:&amp;#34;, t) default: } } }() http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) } 1 2 3 4 #cmdline go run main.go go</description>
    </item>
    
    <item>
      <title>panic in golang</title>
      <link>http://localhost:1313/post/panic_in_golang/</link>
      <pubDate>Sun, 05 Sep 2021 00:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/panic_in_golang/</guid>
      <description>Resources panic的三种触发方式: https://mp.weixin.qq.com/s/cs_jLLoaq4rweVYFbeJoFw panic实现: https://mp.weixin.qq.com/s/-tYjR9K6tWG3aNOeGFsT3Q</description>
    </item>
    
    <item>
      <title>sync in golang</title>
      <link>http://localhost:1313/post/sync_in_golang/</link>
      <pubDate>Sun, 05 Sep 2021 00:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/sync_in_golang/</guid>
      <description>Resources sync.Once sync.Once()的妙用: https://mp.weixin.qq.com/s/7QyQS9DQj1czA6BVR6ywYA sync.Once()实现原理: https://segmentfault.com/a/1190000039294152 sync.WaitGroup()的实现原理: https://zhuanlan.zhihu.com/p/344973865</description>
    </item>
    
    <item>
      <title>interface in golang</title>
      <link>http://localhost:1313/post/interface_in_golang/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/interface_in_golang/</guid>
      <description>Resources []int能转换为[]interface吗: https://mp.weixin.qq.com/s/tqR5zMPobm20lao-2QNrVA</description>
    </item>
    
    <item>
      <title>Sync map在Go中运用</title>
      <link>http://localhost:1313/post/sync_map_in_go/</link>
      <pubDate>Wed, 04 Aug 2021 23:05:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/sync_map_in_go/</guid>
      <description>Resource Go sync map 的内部实现: https://mp.weixin.qq.com/s/TGBSUYLiuBaoi3pNbN0BOQ sync map详解: https://blog.csdn.net/a348752377/article/details/104972194 RWMutex内部实现: https://sreramk.medium.com/go-sync-rwmutex-internals-and-usage-explained-9eb15865bba</description>
    </item>
    
    <item>
      <title>Go中的map</title>
      <link>http://localhost:1313/post/map_in_golang/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/map_in_golang/</guid>
      <description>Resource map中的删除: https://mp.weixin.qq.com/s/fTyfcBhRGNo3Q3Gl12_XNw</description>
    </item>
    
    <item>
      <title>Go语言的优势和劣势</title>
      <link>http://localhost:1313/post/advantages_and_disadvantages_in_go/</link>
      <pubDate>Wed, 07 Jul 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/advantages_and_disadvantages_in_go/</guid>
      <description>Resources GopherChina 2021 Ian说完整泛型实现将在Go1.18发布(会议实录): https://mp.weixin.qq.com/s/RFfa-A0DomH2pXz4arAVnA</description>
    </item>
    
    <item>
      <title>Scheduling in Golang</title>
      <link>http://localhost:1313/post/schdule_in_golang/</link>
      <pubDate>Tue, 29 Jun 2021 00:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/schdule_in_golang/</guid>
      <description>gopark and goready  https://blog.csdn.net/u010853261/article/details/85887948  </description>
    </item>
    
    <item>
      <title>escape in golang</title>
      <link>http://localhost:1313/post/escape_in_golang/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/escape_in_golang/</guid>
      <description>Resource 通过Golang内存逃逸分析讨论GC的压力: https://www.jianshu.com/p/10e83dc6cd64?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io</description>
    </item>
    
    <item>
      <title>golang中的context</title>
      <link>http://localhost:1313/post/context_in_golang/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/context_in_golang/</guid>
      <description>Reference: goroutine如何退出: https://geektutu.com/post/hpg-exit-goroutine.html context包解析: https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247486310&amp;amp;idx=1&amp;amp;sn=e1d998f35293e1bf259bf51f2f7ef6bd&amp;amp;scene=21#wechat_redirect</description>
    </item>
    
    <item>
      <title>golang中的defer</title>
      <link>http://localhost:1313/post/defer_in_golang/</link>
      <pubDate>Fri, 02 Apr 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/defer_in_golang/</guid>
      <description>Reference defer分析: https://studygolang.com/articles/742 defer实现原理: https://segmentfault.com/a/1190000020614493 defer优化: https://zhuanlan.zhihu.com/p/401339057 deferreturn函数: https://www.modb.pro/db/88823</description>
    </item>
    
    <item>
      <title>golang中的error</title>
      <link>http://localhost:1313/post/error_in_goalng/</link>
      <pubDate>Fri, 02 Apr 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/error_in_goalng/</guid>
      <description>Reference wrapp error解析: https://studygolang.com/articles/23346?fr=sidebar</description>
    </item>
    
    <item>
      <title>golang中的select</title>
      <link>http://localhost:1313/post/select_in_golang/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/select_in_golang/</guid>
      <description>Reference: select关键字: https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-select/</description>
    </item>
    
    <item>
      <title>一道关于gorotine的死锁问题</title>
      <link>http://localhost:1313/post/deadlock_in_goroutine/</link>
      <pubDate>Mon, 18 Jan 2021 21:05:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/deadlock_in_goroutine/</guid>
      <description>一道关于goroutine死锁 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch := make(chan int) go fmt.Println(&amp;lt;-ch) ch &amp;lt;- 5 time.Sleep(2 * time.Second) } 上述结果我选择输出5，分析如下。go关</description>
    </item>
    
    <item>
      <title>Channel在Go中运用</title>
      <link>http://localhost:1313/post/the_usage_of_channel_in_go/</link>
      <pubDate>Thu, 10 Dec 2020 21:05:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/the_usage_of_channel_in_go/</guid>
      <description>basic usage of channel 使用channel发送接收 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import &amp;#34;fmt&amp;#34; func main() { jobs := make(chan int, 5) done := make(chan bool) go func() { for { j, more</description>
    </item>
    
  </channel>
</rss>