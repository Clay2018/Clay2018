<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>solidity on Hugo NexT</title><link>/tags/solidity/</link><description>Recent content in solidity on Hugo NexT</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 09 May 2023 00:00:44 +0800</lastBuildDate><atom:link href="/tags/solidity/rss.xml" rel="self" type="application/rss+xml"/><item><title>security audit in solidity</title><link>/post/security_audit_in_solidity/</link><pubDate>Tue, 09 May 2023 00:00:44 +0800</pubDate><guid>/post/security_audit_in_solidity/</guid><description>security audit in solidity 一个合约审计，首先是将其编译通过，之后是看其测试覆盖率</description></item><item><title>race_condition_in_solidity</title><link>/post/race_condition_in_solidity/</link><pubDate>Mon, 08 May 2023 00:00:44 +0800</pubDate><guid>/post/race_condition_in_solidity/</guid><description>race condition in solidity reentrancy what is reentrancy
https://www.numencyber.com/what-is-a-reentrancy-attack/ Examples
decodeing sentiment protocol&amp;rsquo;s $1 million exploit: https://quillaudits.medium.com/decoding-sentiment-protocols-1-million-exploit-quillaudits-f36bee77d376</description></item><item><title>Uniswap</title><link>/post/uniswap/</link><pubDate>Tue, 01 Nov 2022 00:28:00 +0800</pubDate><guid>/post/uniswap/</guid><description>uniswap uniswapv2 resources https://docs.uniswap.org/protocol/V2/introduction whitepaper: https://uniswap.org/whitepaper.pdf uniswapv2-core uniswapv2-core 架构图: uniswapv2-periphery tips uniswapv2的Oracle uniswapv2版本起，就已经提供了预言机功能，用来计算交易对的时间加权平均价</description></item><item><title>byte code in solidity</title><link>/post/byte_code_in_solidity/</link><pubDate>Wed, 19 Oct 2022 00:28:00 +0800</pubDate><guid>/post/byte_code_in_solidity/</guid><description>Resources All About Data Location: https://betterprogramming.pub/solidity-tutorial-all-about-data-locations-dabd33212471 All About Solidity Data Locations - Storage: https://betterprogramming.pub/all-about-solidity-data-locations-part-i-storage-e50604bfc1ad All About Memory: https://betterprogramming.pub/solidity-tutorial-all-about-memory-1e1696d71ee4</description></item><item><title>Understanding Bytecode on Ethereum</title><link>/post/bytecode_in_solidity/</link><pubDate>Fri, 07 Oct 2022 00:28:00 +0800</pubDate><guid>/post/bytecode_in_solidity/</guid><description>Understanding Bytecode on Ethereum https://medium.com/authereum/bytecode-and-init-code-and-runtime-code-oh-my-7bcd89065904</description></item><item><title>Optimizer in solidity</title><link>/post/optimizer_in_solidity/</link><pubDate>Sun, 25 Sep 2022 00:28:00 +0800</pubDate><guid>/post/optimizer_in_solidity/</guid><description>Optimizer in solidity 合约设计及实现变迁 v1.x版本实现，每次创建同样的合约 v2.x版本实现, 逻辑单独抽象成library,每次创建合约仅包含storage</description></item><item><title>library in solidity</title><link>/post/library_in_solidity/</link><pubDate>Fri, 23 Sep 2022 00:28:00 +0800</pubDate><guid>/post/library_in_solidity/</guid><description>this变量 library MathLib { function multiply(uint a, uint b) public view returns (uint, address) { return (a * b, address(this)); } } contract Example { using MathLib for uint; address public owner = address(this); address public retAddr; function multiplyExample(uint _a, uint _b) public view returns (uint, address) { uint a; (a, retAddr) = _a.multiply(_b); return (a, retAddr); } } resource https://jeancvllr.medium.com/solidity-tutorial-all-about-libraries-762e5a3692f9</description></item><item><title>solidity</title><link>/post/solidity/</link><pubDate>Tue, 23 Aug 2022 00:28:00 +0800</pubDate><guid>/post/solidity/</guid><description>solidity 本篇文章跟踪solidity语言文档 https://docs.soliditylang.org/en/v0.8.18/layout-of-source-files.html https://docs.soliditylang.org/en/v0.8.18/structure-of-a-contract.html abi how to cal contract-address by create: https://ethereum.stackexchange.com/questions/24248/how-to-calculate-an-ethereum-contracts-address-during-its-creation-using-the-so https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding tools Solidity Visual Developer: https://consensys.net/diligence/blog/2019/10/solidity-visual-auditor-extension-for-vs-code/ sliter gas优化 gas优化: https://www.theblockbeats.info/news/31602 Resources https://learnblockchain.cn/article/4800 solidity寻址: https://www.whatsblockchain.com/posts/c052872a.html https://blog.51cto.com/shijianfeng/5151269 self destruct: https://solidity-by-example.org/hacks/self-destruct/ 逆向de</description></item><item><title>Guessing Game</title><link>/post/guess_game/</link><pubDate>Sun, 07 Nov 2021 00:05:24 +0800</pubDate><guid>/post/guess_game/</guid><description>Build a Failr, Oracle-Free(no oracles allowed) Guessing Game in solidity which pits two players against each other in a game where each player tries to guess whether a randomly generated number is high or low.
answer
/** ### reference - random optimize - https://www.cnblogs.com/huahuayu/p/8884165.html - https://blog.csdn.net/weixin_43587332/article/details/ 106743233 - multi people **/ pragma solidity ^0.4.0; library SafeMath { function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; assert(c / a == b); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { // assert(b &amp;gt; 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b; // assert(a == b * c + a % b); // There is no case in which this doesn&amp;#39;t hold return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b &amp;lt;= a); return a - b; } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c &amp;gt;= a); return c; } } contract GuessData { //address public implementation; mapping(address=&amp;gt;uint256) public player2balance; address[2] public playerSet; uint256[2] inputs; address public lastRoundWinner; uint256 public wager = 0; address public playerA = address(0); address public playerB = address(0); bool public isGameStarted = false; } contract GuessGame is GuessData { using SafeMath for uint256; modifier onlyPlayer() { require(playerSet[0] !</description></item></channel></rss>