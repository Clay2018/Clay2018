<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 May 2021 00:00:44 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>microservice</title>
      <link>http://localhost:1313/post/microservice_gateway/</link>
      <pubDate>Thu, 06 May 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/microservice_gateway/</guid>
      <description>Resources  https://mp.weixin.qq.com/s/So_HYu90vGcvE4qU5D9m4g  </description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>http://localhost:1313/post/mysql/</link>
      <pubDate>Thu, 06 May 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mysql/</guid>
      <description>InnoDB索引 InnoDB索引，终于懂了: https://mp.weixin.qq.com/s/39XgTTC2VUVGq0EIlpb3WA 数据库索引，为什么设计成这样: https://mp.weixin.qq.com/s/0x5T-wbAoNVHkKTT61lIUQ InnoDB并发为何如此高: https://mp.weixin.qq.com/s/fmzaIobOihKKZ7kyZQInTg 缓存: https://mp.weixin.qq.com/s/4oGRpNyD9ZhNvvJuvFOUXQ 数据库、缓存双写一致性:</description>
    </item>
    
    <item>
      <title>system design</title>
      <link>http://localhost:1313/post/system_design/</link>
      <pubDate>Thu, 06 May 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/system_design/</guid>
      <description>Resources 亿级数据库秒级扩容: https://blog.csdn.net/z50L2O08e2u4afToR9A/article/details/89839471 互联网架构高可用: https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651962050&amp;amp;idx=1&amp;amp;sn=f60b8bb833fe3425f5227da42e3b3adf&amp;amp;chksm=bd2d0f1e8a5a8608f81d42a16eea476d0bd4763f84f9a008ed616d1cfa050a4015780f898eb1&amp;amp;scene=21#wechat_redirect 业务层，到底需不需要服务化: https://mp.weixin.qq.com/s/81Phkxg13ligFEWPTwpsfg 无锁缓存，每秒10万并发: https://mp.weixin.qq.com/s/BfuRWaB7RDjpGmQbZdmMZw 第三方服务挂了,怎样解决: https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651964475&amp;amp;idx=1&amp;amp;sn=e452b648f52cb9a5deb711334b0bb354&amp;amp;chksm=bd2d71e78a5af8f163e7af84855a523e847732be4ba486f68a55a4a153764096b38cb60221e9&amp;amp;scene=21#wechat_redirect</description>
    </item>
    
    <item>
      <title>write an rpc from scratch</title>
      <link>http://localhost:1313/post/write_an_rpc_from_scratch/</link>
      <pubDate>Fri, 30 Apr 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/write_an_rpc_from_scratch/</guid>
      <description>Reference  write an rpc from scratch: https://alexanderell.is/posts/rpc-from-scratch/  </description>
    </item>
    
    <item>
      <title>golang中的context</title>
      <link>http://localhost:1313/post/context_in_golang/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/context_in_golang/</guid>
      <description>Reference: context包解析: https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247486310&amp;amp;idx=1&amp;amp;sn=e1d998f35293e1bf259bf51f2f7ef6bd&amp;amp;scene=21#wechat_redirect</description>
    </item>
    
    <item>
      <title>分布式锁</title>
      <link>http://localhost:1313/post/distributed_lock/</link>
      <pubDate>Mon, 19 Apr 2021 01:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/distributed_lock/</guid>
      <description>实现 分布式锁redis锁和zookeeper锁: https://mp.weixin.qq.com/s/lrSQBK-Kihkj6994kQFpUQ 未分类 企业级高可用分布式锁原理剖析及设计实践 分布式锁应用场景 掌握分布式锁设计核心要点 能够根</description>
    </item>
    
    <item>
      <title>redis集锦</title>
      <link>http://localhost:1313/post/redis/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/redis/</guid>
      <description>Redis命令 redis命令目录: http://doc.redisfans.com/ Redis五种数据结构原理 redis数据结构: https://zhuanlan.zhihu.com/p/148562122 quicklist实现: https://juejin.cn/post/6844904023418486791 https://i6448038.github.io/2019/12/01/redis-data-struct/ Redis用作分布式锁 https://www.jianshu.com/p/83224c0f3bb9 Re</description>
    </item>
    
    <item>
      <title>golang中的defer</title>
      <link>http://localhost:1313/post/defer_in_golang/</link>
      <pubDate>Fri, 02 Apr 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/defer_in_golang/</guid>
      <description>Reference defer分析: https://studygolang.com/articles/742</description>
    </item>
    
    <item>
      <title>golang中的error</title>
      <link>http://localhost:1313/post/error_in_goalng/</link>
      <pubDate>Fri, 02 Apr 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/error_in_goalng/</guid>
      <description>Reference wrapp error解析: https://studygolang.com/articles/23346?fr=sidebar</description>
    </item>
    
    <item>
      <title>golang中的select</title>
      <link>http://localhost:1313/post/select_in_golang/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/select_in_golang/</guid>
      <description>Reference: select关键字: https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-select/</description>
    </item>
    
    <item>
      <title>golang哈希表</title>
      <link>http://localhost:1313/post/hashmap_in_golang/</link>
      <pubDate>Wed, 31 Mar 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hashmap_in_golang/</guid>
      <description>Reference 理解Golang哈希表的原理： https://juejin.cn/post/6844903793927143438 golang哈希表： https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/ golang的for-range(哈希表的遍历): https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-for-range/</description>
    </item>
    
    <item>
      <title>sort algorithm</title>
      <link>http://localhost:1313/post/sort_algorithm/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/sort_algorithm/</guid>
      <description>排序算法复杂度 冒泡排序 将第一个数A跟第二个数B相比较，如果A&amp;gt;B，那么交换A，B位置，接下来将第二个数跟第三个数比较 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>http://localhost:1313/post/binary_search/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/binary_search/</guid>
      <description>二分查找 从一个从小到大的序列中找寻数goal, 采用二分查找。 思路：选择两个变量，分别赋值区间的首尾；选取区间的中间值与goal相比较，如果g</description>
    </item>
    
    <item>
      <title>Java线程池实现原理及其在美团业务中的实践</title>
      <link>http://localhost:1313/post/thread_pooling_practice_in_meituan/</link>
      <pubDate>Mon, 15 Mar 2021 14:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/thread_pooling_practice_in_meituan/</guid>
      <description>Java线程池实现原理及其在美团业务中的实践 Portal: https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html</description>
    </item>
    
    <item>
      <title>为什么TCP协议有粘包问题</title>
      <link>http://localhost:1313/post/why_the_design_tcp_message_frame-%E5%89%AF%E6%9C%AC/</link>
      <pubDate>Mon, 15 Mar 2021 14:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/why_the_design_tcp_message_frame-%E5%89%AF%E6%9C%AC/</guid>
      <description>为什么TCP协议有粘包问题 Portal: https://draveness.me/whys-the-design-tcp-message-frame/</description>
    </item>
    
    <item>
      <title>NAT 穿透</title>
      <link>http://localhost:1313/post/nat_in_tcp/</link>
      <pubDate>Thu, 11 Mar 2021 14:47:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/nat_in_tcp/</guid>
      <description>NAT穿透在TCP中的运用 Portal: https://www.baseclass.io/huffman-coding/</description>
    </item>
    
    <item>
      <title>Huffman-coding</title>
      <link>http://localhost:1313/post/huffman_coding/</link>
      <pubDate>Fri, 05 Mar 2021 15:45:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/huffman_coding/</guid>
      <description>Huffman-coding Portal: https://www.baseclass.io/huffman-coding/</description>
    </item>
    
    <item>
      <title>一道关于gorotine的死锁问题</title>
      <link>http://localhost:1313/post/deadlock_in_goroutine/</link>
      <pubDate>Mon, 18 Jan 2021 21:05:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/deadlock_in_goroutine/</guid>
      <description>一道关于goroutine死锁 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch := make(chan int) go fmt.Println(&amp;lt;-ch) ch &amp;lt;- 5 time.Sleep(2 * time.Second) } 上述结果我选择输出5，分析如下。go关</description>
    </item>
    
    <item>
      <title>BTC devguide(3)</title>
      <link>http://localhost:1313/post/btc_devguide_3/</link>
      <pubDate>Wed, 30 Dec 2020 15:59:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/btc_devguide_3/</guid>
      <description>Operating Modes 比特币软件具有不同级别的安全性和权衡，以验证区块链 Introduction 当前，有两种主要的方法来验证区块链作为客户端：完整节点和SPV客户端。 由于不建议使用</description>
    </item>
    
    <item>
      <title>BTC devguide(2)</title>
      <link>http://localhost:1313/post/btc_devguide_2/</link>
      <pubDate>Wed, 30 Dec 2020 15:16:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/btc_devguide_2/</guid>
      <description>Transactions 交易让用户花了satoshis。 每笔交易都由几部分组成，既可以进行简单的直接付款，也可以进行复杂的交易。 Introduction 本节将描述每个部分并演示如何一起</description>
    </item>
    
    <item>
      <title>BTC devguide(1)</title>
      <link>http://localhost:1313/post/btc_devguide_1/</link>
      <pubDate>Tue, 29 Dec 2020 18:12:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/btc_devguide_1/</guid>
      <description>Block Chain 区块链系统提供了公共分类帐，有序且带有时间戳记的交易记录。 该系统用于防止重复支出和修改以前的交易记录。 Introduction 比特币网络中的每个完整节点都独立</description>
    </item>
    
    <item>
      <title>Base58Check 编码</title>
      <link>http://localhost:1313/post/base58check_encoding/</link>
      <pubDate>Tue, 29 Dec 2020 10:28:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/base58check_encoding/</guid>
      <description>本文章翻译自Base58Check encoding，如有侵权，请联系作者进行删除 Background Base58Check 是一种被用来编码比特币地址的协议 这原始比特币源码解释了为</description>
    </item>
    
    <item>
      <title>Channel在Go中运用</title>
      <link>http://localhost:1313/post/the_usage_of_channel_in_go/</link>
      <pubDate>Thu, 10 Dec 2020 21:05:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/the_usage_of_channel_in_go/</guid>
      <description>basic usage of channel 使用channel发送接收 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import &amp;#34;fmt&amp;#34; func main() { jobs := make(chan int, 5) done := make(chan bool) go func() { for { j, more</description>
    </item>
    
    <item>
      <title>Celery笔记</title>
      <link>http://localhost:1313/post/celerynote/</link>
      <pubDate>Thu, 26 Nov 2020 15:57:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/celerynote/</guid>
      <description>Getting Started celery is flexible. Almost every part of Celry can be extended or used on its own, Custom pool implementations, serializers, compression schemes, logging, schedulers, consumers, producers, broker transports, and much more. celery中current_app的指向 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # main.py</description>
    </item>
    
    <item>
      <title>Linux线程</title>
      <link>http://localhost:1313/post/linux_thread/</link>
      <pubDate>Tue, 14 Jul 2020 23:45:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/linux_thread/</guid>
      <description>Linux线程 Linux线程的发展 1991年1月发布的Linux2.2内核中，进程是通过系统调用fork创建的，新的进程是原来进程的子进程。</description>
    </item>
    
    <item>
      <title>哈希算法和密钥保存</title>
      <link>http://localhost:1313/post/hashalgorithmandkeypreservation/</link>
      <pubDate>Sun, 12 Jul 2020 21:49:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hashalgorithmandkeypreservation/</guid>
      <description>本文章翻译自Pradeep Loganathan，如有侵权，请联系作者进行删除 什么是哈希?哈希算法和密钥保存 哈希 哈希是一个单向函数，它将任意长</description>
    </item>
    
    <item>
      <title>核酸试剂的复合检测</title>
      <link>http://localhost:1313/post/compounddetectionofnucleicacidreagent/</link>
      <pubDate>Sun, 05 Jul 2020 23:46:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/compounddetectionofnucleicacidreagent/</guid>
      <description>问题: 100个人，其中一个人是患者；一个人使用一支酸剂测试，患者产生反应，否则不产生反应，至少用几只酸剂可以测试出患者是谁？ 答: 1支酸剂测试</description>
    </item>
    
    <item>
      <title>Build_hugo_site</title>
      <link>http://localhost:1313/post/build_hugo_site/</link>
      <pubDate>Sat, 04 Jul 2020 14:51:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/build_hugo_site/</guid>
      <description>搭建Hugo博客网站 1 测试语法 1 测试图片 API bbb 发布文章 hugo new post/xxxx.md 发布github hugo -t even Reference https://segmentfault.com/a/1190000012975914?utm_source=tag-newest https://juejin.im/post/5e9cf8bd51882538083fec4c#heading-1 https://www.jianshu.com/p/475110a1c811</description>
    </item>
    
  </channel>
</rss>