<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>language on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/categories/language/</link>
    <description>Recent content in language on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Jun 2021 00:00:44 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/language/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang语言遇到的bug</title>
      <link>http://localhost:1313/post/bug_in_golang/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/bug_in_golang/</guid>
      <description>Resource 分析Go time.After 引起内存暴增OOM问题: https://mp.weixin.qq.com/s/jaIdqF0bFpHz_eyPsHjbwQ Go gctrace 引起runtime 调度阻塞: https://mp.weixin.qq.com/s/eHEvVzmpPYXAQgcdd_B55w</description>
    </item>
    
    <item>
      <title>Go中的init函数</title>
      <link>http://localhost:1313/post/init_in_golang/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/init_in_golang/</guid>
      <description>Resource init函数: https://studygolang.com/articles/13865?fr=sidebar</description>
    </item>
    
    <item>
      <title>Go中的内存分配</title>
      <link>http://localhost:1313/post/new_and_malloc_in_go/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/new_and_malloc_in_go/</guid>
      <description>Resource Go内存管理: https://mp.weixin.qq.com/s/PNRhtdS_gZVTtrkkRmx7yA</description>
    </item>
    
    <item>
      <title>golang中的context</title>
      <link>http://localhost:1313/post/context_in_golang/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/context_in_golang/</guid>
      <description>Reference: context包解析: https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247486310&amp;amp;idx=1&amp;amp;sn=e1d998f35293e1bf259bf51f2f7ef6bd&amp;amp;scene=21#wechat_redirect</description>
    </item>
    
    <item>
      <title>golang中的defer</title>
      <link>http://localhost:1313/post/defer_in_golang/</link>
      <pubDate>Fri, 02 Apr 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/defer_in_golang/</guid>
      <description>Reference defer分析: https://studygolang.com/articles/742</description>
    </item>
    
    <item>
      <title>golang中的error</title>
      <link>http://localhost:1313/post/error_in_goalng/</link>
      <pubDate>Fri, 02 Apr 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/error_in_goalng/</guid>
      <description>Reference wrapp error解析: https://studygolang.com/articles/23346?fr=sidebar</description>
    </item>
    
    <item>
      <title>golang中的select</title>
      <link>http://localhost:1313/post/select_in_golang/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/select_in_golang/</guid>
      <description>Reference: select关键字: https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-select/</description>
    </item>
    
    <item>
      <title>golang哈希表</title>
      <link>http://localhost:1313/post/hashmap_in_golang/</link>
      <pubDate>Wed, 31 Mar 2021 01:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hashmap_in_golang/</guid>
      <description>Reference 理解Golang哈希表的原理： https://juejin.cn/post/6844903793927143438 golang哈希表： https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/ golang的for-range(哈希表的遍历): https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-for-range/</description>
    </item>
    
    <item>
      <title>一道关于gorotine的死锁问题</title>
      <link>http://localhost:1313/post/deadlock_in_goroutine/</link>
      <pubDate>Mon, 18 Jan 2021 21:05:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/deadlock_in_goroutine/</guid>
      <description>一道关于goroutine死锁 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ch := make(chan int) go fmt.Println(&amp;lt;-ch) ch &amp;lt;- 5 time.Sleep(2 * time.Second) } 上述结果我选择输出5，分析如下。go关</description>
    </item>
    
    <item>
      <title>Channel在Go中运用</title>
      <link>http://localhost:1313/post/the_usage_of_channel_in_go/</link>
      <pubDate>Thu, 10 Dec 2020 21:05:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/the_usage_of_channel_in_go/</guid>
      <description>basic usage of channel 使用channel发送接收 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import &amp;#34;fmt&amp;#34; func main() { jobs := make(chan int, 5) done := make(chan bool) go func() { for { j, more</description>
    </item>
    
    <item>
      <title>Celery笔记</title>
      <link>http://localhost:1313/post/celerynote/</link>
      <pubDate>Thu, 26 Nov 2020 15:57:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/celerynote/</guid>
      <description>Getting Started celery is flexible. Almost every part of Celry can be extended or used on its own, Custom pool implementations, serializers, compression schemes, logging, schedulers, consumers, producers, broker transports, and much more. celery中current_app的指向 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # main.py</description>
    </item>
    
  </channel>
</rss>